{"version":3,"sources":["images/not-found.jpeg","images/prueba.png","services/api.js","components/CharacterDetail.js","components/Header.js","components/Filter.js","components/Character.js","components/CharacterList.js","components/Homepage.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js","images/logo-rick-and-morty.png"],"names":["module","exports","getApiData","fetch","then","response","json","data","results","map","character","id","name","img","image","species","status","origin","episodes","episode","length","CharacterDetail","props","console","log","className","src","logo","alt","to","Header","Filter","type","placeholder","value","filteredBy","onChange","ev","preventDefault","handleInput","target","key","Character","CharacterList","myCharacter","characters","Homepage","NotFound","imgNotFound","App","useState","setCharacters","setName","setValue","useEffect","exact","path","render","filter","toLowerCase","includes","detailId","parseInt","match","params","myCharacterDetail","find","undefined","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a406fd2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.157819e5.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/prueba.af2972d9.png\";","const getApiData = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        return {\r\n          id: character.id,\r\n          name: character.name,\r\n          img: character.image,\r\n          species: character.species,\r\n          status: character.status,\r\n          origin: character.origin.name,\r\n          episodes: character.episode.length,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getApiData;\r\n//  .catch(function (error) {\r\n//       console.log(error);\r\n//     });\r\n","import React from 'react';\r\nimport logo from '../images/logo-rick-and-morty.png';\r\nimport { Link } from 'react-router-dom';\r\nfunction CharacterDetail(props) {\r\n  console.log(props.character.name);\r\n  return (\r\n    <>\r\n      <div className=\"background\">\r\n        <img className=\"container--img\" src={logo} alt=\"logo\" />\r\n        <Link to=\"/\" className=\"return--button\">\r\n          Volver\r\n        </Link>\r\n        <div className=\"detail--container\">\r\n          <img className=\"detail--img\" src={props.character.img} alt={props.character.name} />\r\n          <span className=\"detail--text--container\">\r\n            <h3 className=\"list--name\">{props.character.name}</h3>\r\n            <small>Status: {props.character.status}</small>\r\n            <small>Species: {props.character.species}</small>\r\n            <small>Origin: {props.character.origin}</small>\r\n            <small>Episodes: {props.character.episodes}</small>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CharacterDetail;\r\n","import React from 'react';\nimport logo from '../images/logo-rick-and-morty.png';\n\nfunction Header() {\n  return (\n    <header className=\"App\">\n      <img className=\"container--img\" src={logo} alt=\"logo\" />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Filter(props) {\n  const handleInput = (ev) => {\n    ev.preventDefault();\n    props.handleInput({\n      value: ev.target.value,\n      key: 'name',\n    });\n  };\n  return (\n    <form>\n      <input className=\"container--input\" type=\"text\" placeholder=\"Busca un personaje\" value={props.filteredBy} onChange={handleInput} />\n    </form>\n  );\n}\n\nexport default Filter;\n","import React from 'react';\r\nimport prueba from '../images/prueba.png';\r\nimport { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\n\r\nfunction Character(props) {\r\n  return (\r\n    <Link to={`/character/${props.character.id}`}>\r\n      <li className=\"list--element\">\r\n        <img className=\"list--img\" src={props.character.img} alt={props.character.name} />\r\n        <div className=\"list--container\">\r\n          <h3 className=\"list--name\">{props.character.name}</h3>\r\n          <small>{props.character.species}</small>\r\n        </div>\r\n      </li>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Character;\r\n","import React from 'react';\nimport Character from './Character';\n\nfunction CharacterList(props) {\n  console.log(props, 'my props');\n  const myCharacter = props.characters.map((character) => {\n    return <Character key={character.id} character={character} />;\n  });\n  return <ul className=\"list\">{myCharacter}</ul>;\n}\n\nexport default CharacterList;\n","import React, { useEffect, useState } from 'react';\r\nimport Header from './Header';\r\nimport Filter from './Filter';\r\nimport CharacterList from './CharacterList';\r\n\r\nfunction Homepage(props) {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Filter handleInput={props.handleInput} filteredBy={props.filteredBy} />\r\n      <CharacterList characters={props.characters} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport logo from '../images/logo-rick-and-morty.png';\r\nimport imgNotFound from '../images/not-found.jpeg';\r\nimport { Link } from 'react-router-dom';\r\nfunction NotFound(props) {\r\n  return (\r\n    <>\r\n      <div className=\"background\">\r\n        <img className=\"container--img\" src={logo} alt=\"logo\" />\r\n        <Link to=\"/\" className=\"return--button\">\r\n          Volver\r\n        </Link>\r\n        <div className=\"detail--container--notfound\">\r\n          <img className=\"container--img\" src={imgNotFound} alt=\"AHHHHHHH MIS OJOS\" />\r\n          <h1>No hemos encontrado el personaje que buscabas</h1>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../stylesheets/App.css';\r\nimport getApiData from '../services/api.js';\r\nimport CharacterDetail from './CharacterDetail';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Homepage from './Homepage';\r\nimport NotFound from './NotFound';\r\n\r\nfunction App() {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [value, setValue] = useState('');\r\n  useEffect(() => {\r\n    getApiData().then((data) => {\r\n      setCharacters(data);\r\n    });\r\n  }, []);\r\n  function handleInput(data) {\r\n    setName(data.value);\r\n    setValue(data.value);\r\n  }\r\n\r\n  function handleHomePage() {\r\n    const filter = characters.filter((character) => {\r\n      return character.name.toLowerCase().includes(name.toLowerCase());\r\n    });\r\n    return <Homepage handleInput={handleInput} characters={filter} filteredBy={value} />;\r\n  }\r\n\r\n  const handleCharacterDetail = (props) => {\r\n    const detailId = parseInt(props.match.params.id);\r\n    console.log(detailId);\r\n    const myCharacterDetail = characters.find((character) => {\r\n      return character.id === detailId;\r\n    });\r\n    if (myCharacterDetail !== undefined) {\r\n      return <CharacterDetail character={myCharacterDetail} />;\r\n    } else {\r\n      return <NotFound />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/\" render={handleHomePage} />\r\n        <Route path=\"/character/:id\" render={handleCharacterDetail} /> />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-rick-and-morty.75509f2e.png\";"],"sourceRoot":""}