{"version":3,"sources":["images/prueba.png","images/logo-rick-and-morty.png","services/api.js","components/Header.js","components/Character.js","components/CharacterList.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getApiData","fetch","then","response","json","data","results","map","character","console","log","id","name","img","image","species","status","origin","episodes","episode","length","Header","props","className","src","logo","alt","type","placeholder","onChange","ev","handleInput","value","target","key","Character","CharacterList","myCharacter","characters","App","useState","setCharacters","setName","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wEAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,mKCmB5BC,G,MAnBI,WACjB,OAAOC,MAAM,6CACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQC,KAAI,SAACC,GAEvB,OADAC,QAAQC,IAAIF,GACL,CACLG,GAAIH,EAAUG,GACdC,KAAMJ,EAAUI,KAChBC,IAAKL,EAAUM,MACfC,QAASP,EAAUO,QACnBC,OAAQR,EAAUQ,OAClBC,OAAQT,EAAUS,OAAOL,KACzBM,SAAUV,EAAUW,QAAQC,gB,gBCSvBC,MAnBf,SAAgBC,GAOd,OACE,oCACE,4BAAQC,UAAU,OAChB,yBAAKA,UAAU,iBAAiBC,IAAKC,IAAMC,IAAI,SAC/C,8BACE,2BAAOH,UAAU,mBAAmBI,KAAK,OAAOC,YAAY,qBAAqBC,SAXrE,SAACC,GACnBR,EAAMS,YAAY,CAChBC,MAAOF,EAAGG,OAAOD,MACjBE,IAAK,gB,KCQIC,MAZf,SAAmBb,GACjB,OACE,wBAAIC,UAAU,iBACZ,yBAAKA,UAAU,YAAYC,IAAKF,EAAMd,UAAUK,IAAKa,IAAKJ,EAAMd,UAAUI,OAC1E,yBAAKW,UAAU,mBACb,wBAAIA,UAAU,cAAcD,EAAMd,UAAUI,MAC5C,+BAAQU,EAAMd,UAAUO,YCEjBqB,MAPf,SAAuBd,GACrB,IAAMe,EAAcf,EAAMgB,WAAW/B,KAAI,SAACC,GACxC,OAAO,kBAAC,EAAD,CAAW0B,IAAK1B,EAAUG,GAAIH,UAAWA,OAElD,OAAO,wBAAIe,UAAU,QAAQc,ICmBhBE,MArBf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNF,EADM,KACMG,EADN,OAEWD,mBAAS,IAFpB,mBAEAE,GAFA,WAYb,OATAC,qBAAU,WACR3C,IAAaE,MAAK,SAACG,GACjBoC,EAAcpC,QAEf,IAMD,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CAAQQ,YANZ,SAAqB1B,GACnBI,QAAQC,IAAIL,EAAM,sBAClBqC,EAAQrC,MAKN,kBAAC,EAAD,CAAeiC,WAAYA,MCTbM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.084be585.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prueba.af2972d9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-rick-and-morty.75509f2e.png\";","const getApiData = () => {\r\n  return fetch('https://rickandmortyapi.com/api/character')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.results.map((character) => {\r\n        console.log(character);\r\n        return {\r\n          id: character.id,\r\n          name: character.name,\r\n          img: character.image,\r\n          species: character.species,\r\n          status: character.status,\r\n          origin: character.origin.name,\r\n          episodes: character.episode.length,\r\n        };\r\n      });\r\n    });\r\n};\r\n\r\nexport default getApiData;\r\n//  .catch(function (error) {\r\n//       console.log(error);\r\n//     });\r\n","import React from 'react';\nimport logo from '../images/logo-rick-and-morty.png';\n\nfunction Header(props) {\n  const handleInput = (ev) => {\n    props.handleInput({\n      value: ev.target.value,\n      key: 'name',\n    });\n  };\n  return (\n    <>\n      <header className=\"App\">\n        <img className=\"container--img\" src={logo} alt=\"logo\" />\n        <form>\n          <input className=\"container--input\" type=\"text\" placeholder=\"Busca un personaje\" onChange={handleInput} />\n        </form>\n      </header>\n    </>\n  );\n}\n\nexport default Header;\n","import React from 'react';\r\nimport prueba from '../images/prueba.png';\r\n\r\nfunction Character(props) {\r\n  return (\r\n    <li className=\"list--element\">\r\n      <img className=\"list--img\" src={props.character.img} alt={props.character.name} />\r\n      <div className=\"list--container\">\r\n        <h3 className=\"list--name\">{props.character.name}</h3>\r\n        <small>{props.character.species}</small>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Character;\r\n","import React from 'react';\nimport prueba from '../images/prueba.png';\nimport Character from './Character';\n\nfunction CharacterList(props) {\n  const myCharacter = props.characters.map((character) => {\n    return <Character key={character.id} character={character} />;\n  });\n  return <ul className=\"list\">{myCharacter}</ul>;\n}\n\nexport default CharacterList;\n","import React, { useEffect, useState } from 'react';\nimport '../stylesheets/App.css';\nimport getApiData from '../services/api.js';\nimport Header from './Header';\nimport CharacterList from './CharacterList';\nimport CharacterDetail from './CharacterDetail';\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [name, setName] = useState('');\n  useEffect(() => {\n    getApiData().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n  function handleInput(data) {\n    console.log(data, 'mi data del handle');\n    setName(data);\n  }\n  return (\n    <div className=\"App\">\n      <Header handleInput={handleInput} />\n      <CharacterList characters={characters} />\n      {/* <CharacterDetail characters={characters} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}